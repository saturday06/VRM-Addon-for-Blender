# SPDX-License-Identifier: MIT OR GPL-3.0-or-later
from collections.abc import Iterable, Sequence
from typing import Optional, overload

from bpy.types import (
    Image,
    Material,
    NodeSocket,
    ShaderNode,
    ShaderNodeBsdfPrincipled,
    ShaderNodeMapping,
    ShaderNodeNormalMap,
    ShaderNodeOutputMaterial,
    ShaderNodeTexCoord,
    ShaderNodeTexImage,
)
from mathutils import Color
from typing_extensions import Self, TypeAlias

__all__ = ("PrincipledBSDFWrapper",)

def rgb_to_rgba(rgb: Sequence[float]) -> list[float]: ...
def rgba_to_rgb(rgba: Sequence[float]) -> Color: ...
@overload
def values_clamp(
    val: Iterable[float], minv: Iterable[float], maxv: Iterable[float]
) -> tuple[float, ...]: ...
@overload
def values_clamp(val: float, minv: float, maxv: float) -> float: ...

class ShaderWrapper:
    NODES_LIST: tuple[str, ...]
    __slots__ = (
        "_grid_locations",
        "_node_texcoords",
        "_textures",
        "is_readonly",
        "material",
        "node_out",
    )
    is_readonly: bool
    material: Material
    node_out: Optional[ShaderNodeOutputMaterial]

    def __init__(
        self,
        material: Material,
        is_readonly: bool = True,
        use_nodes: bool = True,
    ) -> None: ...
    def update(self) -> None: ...
    def use_nodes_get(self) -> bool: ...
    def use_nodes_set(self, val: bool) -> None: ...
    @property
    def use_nodes(self) -> bool: ...
    @use_nodes.setter
    def use_nodes(self, val: bool) -> None: ...
    def node_texcoords_get(self) -> Optional[ShaderNodeTexCoord]: ...
    @property
    def node_texcoords(self) -> Optional[ShaderNodeTexCoord]: ...

class PrincipledBSDFWrapper(ShaderWrapper):
    NODES_LIST: tuple[str, ...]
    __slots__ = (
        "_node_normalmap",
        "_node_texcoords",
        "is_readonly",
        "material",
        "node_out",
        "node_principled_bsdf",
    )

    node_principled_bsdf: Optional[ShaderNodeBsdfPrincipled]

    def __init__(
        self,
        material: Material,
        is_readonly: bool = True,
        use_nodes: bool = True,
    ) -> None: ...
    def node_normalmap_get(self) -> Optional[ShaderNodeNormalMap]: ...
    @property
    def node_normalmap(self) -> Optional[ShaderNodeNormalMap]: ...
    def base_color_get(self) -> Sequence[float]: ...
    def base_color_set(self, color: Sequence[float]) -> None: ...
    @property
    def base_color(self) -> Sequence[float]: ...
    @base_color.setter
    def base_color(self, color: Sequence[float]) -> None: ...
    def base_color_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def base_color_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def specular_get(self) -> float: ...
    def specular_set(self, value: float) -> None: ...
    @property
    def specular(self) -> float: ...
    @specular.setter
    def specular(self, value: float) -> None: ...
    def specular_tint_get(self) -> float: ...
    def specular_tint_set(self, value: float) -> None: ...
    @property
    def specular_tint(self) -> float: ...
    @specular_tint.setter
    def specular_tint(self, value: float) -> None: ...
    def specular_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def specular_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def roughness_get(self) -> float: ...
    def roughness_set(self, value: float) -> None: ...
    @property
    def roughness(self) -> float: ...
    @roughness.setter
    def roughness(self, value: float) -> None: ...
    def roughness_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def roughness_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def metallic_get(self) -> float: ...
    def metallic_set(self, value: float) -> None: ...
    @property
    def metallic(self) -> float: ...
    @metallic.setter
    def metallic(self, value: float) -> None: ...
    def metallic_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def metallic_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def ior_get(self) -> float: ...
    def ior_set(self, value: float) -> None: ...
    @property
    def ior(self) -> float: ...
    @ior.setter
    def ior(self, value: float) -> None: ...
    def ior_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def ior_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def transmission_get(self) -> float: ...
    def transmission_set(self, value: float) -> None: ...
    @property
    def transmission(self) -> float: ...
    @transmission.setter
    def transmission(self, value: float) -> None: ...
    def transmission_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def transmission_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def alpha_get(self) -> float: ...
    def alpha_set(self, value: float) -> None: ...
    @property
    def alpha(self) -> float: ...
    @alpha.setter
    def alpha(self, value: float) -> None: ...
    def alpha_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def alpha_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def emission_color_get(self) -> Sequence[float]: ...
    def emission_color_set(self, color: Sequence[float]) -> None: ...
    @property
    def emission_color(self) -> Sequence[float]: ...
    @emission_color.setter
    def emission_color(self, color: Sequence[float]) -> None: ...
    def emission_color_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def emission_color_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def emission_strength_get(self) -> float: ...
    def emission_strength_set(self, value: float) -> None: ...
    @property
    def emission_strength(self) -> float: ...
    @emission_strength.setter
    def emission_strength(self, value: float) -> None: ...
    def emission_strength_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def emission_strength_texture(self) -> Optional[ShaderImageTextureWrapper]: ...
    def normalmap_strength_get(self) -> float: ...
    def normalmap_strength_set(self, value: float) -> None: ...
    @property
    def normalmap_strength(self) -> float: ...
    @normalmap_strength.setter
    def normalmap_strength(self, value: float) -> None: ...
    def normalmap_texture_get(self) -> Optional[ShaderImageTextureWrapper]: ...
    @property
    def normalmap_texture(self) -> Optional[ShaderImageTextureWrapper]: ...

class ShaderImageTextureWrapper:
    NODES_LIST: TypeAlias = tuple[str, ...]
    __slots__ = (
        "_node_image",
        "_node_mapping",
        "colorspace_is_data",
        "colorspace_name",
        "grid_row_diff",
        "is_readonly",
        "node_dst",
        "owner_shader",
        "socket_dst",
        "use_alpha",
    )

    owner_shader: ShaderWrapper
    is_readonly: bool
    grid_row_diff: float
    use_alpha: bool
    colorspace_is_data: Optional[bool]
    colorspace_name: Optional[str]
    node_dst: ShaderNode
    socket_dst: NodeSocket

    def __new__(
        cls,
        owner_shader: ShaderWrapper,
        node_dst: ShaderNode,
        socket_dst: NodeSocket,
        grid_row_diff: float = 0,
        use_alpha: bool = False,
        colorspace_is_data: bool = ...,
        colorspace_name: str = ...,
    ) -> Self: ...
    def __init__(
        self,
        owner_shader: ShaderWrapper,
        node_dst: ShaderNode,
        socket_dst: NodeSocket,
        grid_row_diff: float = 0,
        use_alpha: bool = False,
        colorspace_is_data: bool = ...,
        colorspace_name: str = ...,
    ) -> None: ...
    def copy_from(self, tex: ShaderImageTextureWrapper) -> None: ...
    def copy_mapping_from(self, tex: ShaderImageTextureWrapper) -> None: ...
    def node_image_get(self) -> Optional[ShaderNodeTexImage]: ...
    @property
    def node_image(self) -> Optional[ShaderNodeTexImage]: ...
    def image_get(self) -> Optional[Image]: ...
    def image_set(self, image: Image) -> None: ...
    @property
    def image(self) -> Optional[Image]: ...
    @image.setter
    def image(self, image: Image) -> None: ...
    def projection_get(self) -> str: ...
    def projection_set(self, projection: str) -> None: ...
    @property
    def projection(self) -> str: ...
    @projection.setter
    def projection(self, projection: str) -> None: ...
    def texcoords_get(self) -> str: ...
    def texcoords_set(self, texcoords: str) -> None: ...
    @property
    def texcoords(self) -> str: ...
    @texcoords.setter
    def texcoords(self, texcoords: str) -> None: ...
    def extension_get(self) -> str: ...
    def extension_set(self, extension: str) -> None: ...
    @property
    def extension(self) -> str: ...
    @extension.setter
    def extension(self, extension: str) -> None: ...
    def has_mapping_node(self) -> bool: ...
    def node_mapping_get(self) -> Optional[ShaderNodeMapping]: ...
    @property
    def node_mapping(self) -> Optional[ShaderNodeMapping]: ...
    def translation_get(self) -> Sequence[float]: ...
    def translation_set(self, translation: Sequence[float]) -> None: ...
    @property
    def translation(self) -> Sequence[float]: ...
    @translation.setter
    def translation(self, translation: Sequence[float]) -> None: ...
    def rotation_get(self) -> Sequence[float]: ...
    def rotation_set(self, rotation: Sequence[float]) -> None: ...
    @property
    def rotation(self) -> Sequence[float]: ...
    @rotation.setter
    def rotation(self, rotation: Sequence[float]) -> None: ...
    def scale_get(self) -> Sequence[float]: ...
    def scale_set(self, scale: Sequence[float]) -> None: ...
    @property
    def scale(self) -> Sequence[float]: ...
    @scale.setter
    def scale(self, scale: Sequence[float]) -> None: ...
