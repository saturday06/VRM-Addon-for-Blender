# SPDX-License-Identifier: MIT OR GPL-3.0-or-later

name: update-deno-dependencies

permissions: {}

on:
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:

env:
  PR_BRANCH: update-deno-dependencies
  PR_BASE_BRANCH: main

jobs:
  update-deno-dependencies:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: true # to push "$PR_BRANCH"
          ref: ${{ env.PR_BASE_BRANCH }}
      - name: Switch to working branch
        run: git checkout -b "$PR_BRANCH"
      - uses: denoland/setup-deno@v2
        with:
          deno-version: vx.x.x
      - name: Update .dvmrc
        run: deno eval 'console.log(Deno.version.deno)' | tee .dvmrc
      - name: Update deno.jsonc and deno.lock
        run: |
          deno install --allow-scripts --frozen=false || true
          deno outdated --update --latest --frozen=false || true

          # Just `deno outdated` doesn't update the types+node version in deno.lock's specifiers
          # `"npm:vitepress@*": "1.6.3_vite@ ... @types+node@22.15.21"`
          # so we need to recreate deno.lock itself
          rm -fr deno.lock node_modules || true

          deno install --allow-scripts --frozen=false
          deno outdated --update --latest --frozen=false
      - name: Create PR
        run: |
          set -x

          git add .
          if git diff --cached --exit-code; then
            exit 0
          fi

          git config --global user.name "$GIT_USER_NAME"
          git config --global user.email "$GIT_USER_EMAIL"
          git commit \
            -m "chore(deps): update deno dependencies [BOT]" \
            -m "" \
            -m "Generated by BOT: https://github.com/${GITHUB_REPOSITORY}/blob/main/.github/workflows/update-deno-dependencies.yml"

          git fetch --prune origin "$PR_BRANCH" || true
          if git diff --exit-code "origin/$PR_BRANCH" --; then
            exit 0
          fi

          # Exit with error if GH_TOKEN is invalid
          if ! gh repo view --json name --jq .name; then
            echo "GH_TOKEN is invalid or expired"
            exit 1
          fi

          # We want to force push to reuse existing PRs, but that doesn't trigger
          # Status Checks, so we recreate PRs each time.
          # We'd like to use --delete-branch option, but it tries to checkout
          # the default branch as cleanup and fails, so we don't use it.
          gh pr close "$PR_BRANCH" || true

          git push --delete origin "$PR_BRANCH" || true
          git push origin "$PR_BRANCH"

          gh pr create --base "$PR_BASE_BRANCH" --fill
          gh pr merge --merge --auto
        env:
          # https://github.com/orgs/community/discussions/40405#discussioncomment-8361451
          GIT_USER_NAME: ${{ format('[BOT] {0}', github.actor) }}
          GIT_USER_EMAIL: ${{ format('{0}+{1}@users.noreply.github.com', github.actor_id, github.actor) }}
          # Set the following permissions for GH_TOKEN:
          #   Actions       | Read and write | To automatically run Actions when creating PRs
          #   Contents      | Read and write | For automatic PR merging
          #   Pull requests | Read and write | For creating PRs
          GH_TOKEN: ${{ secrets.UPDATE_DENO_DEPENDENCIES_GH_TOKEN }}
        if: ${{ env.GH_TOKEN }}
